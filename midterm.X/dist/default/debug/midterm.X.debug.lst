

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jan 15 04:38:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4520 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  00049C                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _lolflag
    65  00049C  0026               	dw	38
    66                           
    67                           ;initializer for _i
    68  00049E  0001               	dw	1
    69  0000                     _TRISAbits	set	3986
    70  0000                     _TRISDbits	set	3989
    71  0000                     _TRISCbits	set	3988
    72  0000                     _TMR1	set	4046
    73  0000                     _RCREG	set	4014
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADRESL	set	4035
    76  0000                     _OSCCONbits	set	4051
    77  0000                     _T2CON	set	4042
    78  0000                     _CCP1CON	set	4029
    79  0000                     _T1CON	set	4045
    80  0000                     _RCONbits	set	4048
    81  0000                     _ADCON2bits	set	4032
    82  0000                     _ADCON0bits	set	4034
    83  0000                     _ADCON1bits	set	4033
    84  0000                     _IPR1bits	set	3999
    85  0000                     _PIE1bits	set	3997
    86  0000                     _PIR1bits	set	3998
    87  0000                     _RCSTAbits	set	4011
    88  0000                     _SPBRG	set	4015
    89  0000                     _TXSTAbits	set	4012
    90  0000                     _BAUDCONbits	set	4024
    91  0000                     _CCPR1L	set	4030
    92  0000                     _CCP1CONbits	set	4029
    93  0000                     _PR2	set	4043
    94  0000                     _TXREG	set	4013
    95  0000                     _RCIF	set	31989
    96  0000                     _TMR1IF	set	31984
    97  0000                     _TMR1IE	set	31976
    98  0000                     _INTCONbits	set	4082
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  000412                     __pcinit:
   104                           	opt stack 0
   105  000412                     start_initialization:
   106                           	opt stack 0
   107  000412                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Initialize objects allocated to COMRAM (4 bytes)
   111                           ; load TBLPTR registers with __pidataCOMRAM
   112  000412  0E9C               	movlw	low __pidataCOMRAM
   113  000414  6EF6               	movwf	tblptrl,c
   114  000416  0E04               	movlw	high __pidataCOMRAM
   115  000418  6EF7               	movwf	tblptrh,c
   116  00041A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   117  00041C  6EF8               	movwf	tblptru,c
   118  00041E  EE00  F02F         	lfsr	0,__pdataCOMRAM
   119  000422  EE10 F004          	lfsr	1,4
   120  000426                     copy_data0:
   121  000426  0009               	tblrd		*+
   122  000428  CFF5 FFEE          	movff	tablat,postinc0
   123  00042C  50E5               	movf	postdec1,w,c
   124  00042E  50E1               	movf	fsr1l,w,c
   125  000430  E1FA               	bnz	copy_data0
   126                           
   127                           ; Clear objects allocated to COMRAM (9 bytes)
   128  000432  EE00  F026         	lfsr	0,__pbssCOMRAM
   129  000436  0E09               	movlw	9
   130  000438                     clear_0:
   131  000438  6AEE               	clrf	postinc0,c
   132  00043A  06E8               	decf	wreg,f,c
   133  00043C  E1FD               	bnz	clear_0
   134  00043E                     end_of_initialization:
   135                           	opt stack 0
   136  00043E                     __end_of__initialization:
   137                           	opt stack 0
   138  00043E  9033               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   139  000440  9233               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   140  000442  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  000444  6EF8               	movwf	tblptru,c
   142  000446  0100               	movlb	0
   143  000448  EF38  F002         	goto	_main	;jump to C main() function
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	bssCOMRAM
   154  000026                     __pbssCOMRAM:
   155                           	opt stack 0
   156  000026                     _au:
   157                           	opt stack 0
   158  000026                     	ds	2
   159  000028                     _timersec:
   160                           	opt stack 0
   161  000028                     	ds	2
   162  00002A                     _total:
   163                           	opt stack 0
   164  00002A                     	ds	2
   165  00002C                     _MyadcValue:
   166                           	opt stack 0
   167  00002C                     	ds	2
   168  00002E                     _global:
   169                           	opt stack 0
   170  00002E                     	ds	1
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           postdec1	equ	0xFE5
   178                           fsr1l	equ	0xFE1
   179                           
   180                           	psect	dataCOMRAM
   181  00002F                     __pdataCOMRAM:
   182                           	opt stack 0
   183  00002F                     _lolflag:
   184                           	opt stack 0
   185  00002F                     	ds	2
   186  000031                     _i:
   187                           	opt stack 0
   188  000031                     	ds	2
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	cstackCOMRAM
   199  000001                     __pcstackCOMRAM:
   200                           	opt stack 0
   201  000001                     ?___lwdiv:
   202                           	opt stack 0
   203  000001                     ?___lwmod:
   204                           	opt stack 0
   205  000001                     Myusartwrite@b:
   206                           	opt stack 0
   207  000001                     PWM1_Duty@duty:
   208                           	opt stack 0
   209  000001                     checker@a:
   210                           	opt stack 0
   211  000001                     ___lwdiv@dividend:
   212                           	opt stack 0
   213  000001                     ___lwmod@dividend:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x0
   217  000001                     	ds	2
   218  000003                     ??_PWM1_Duty:
   219  000003                     ??_checker:
   220  000003                     ___lwdiv@divisor:
   221                           	opt stack 0
   222  000003                     ___lwmod@divisor:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x2
   226  000003                     	ds	2
   227  000005                     checker@aChar:
   228                           	opt stack 0
   229  000005                     ___lwmod@counter:
   230                           	opt stack 0
   231  000005                     ___lwdiv@quotient:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x4
   235  000005                     	ds	2
   236  000007                     ___lwdiv@counter:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x6
   240  000007                     	ds	1
   241  000008                     ??_wtf:
   242                           
   243                           ; 1 bytes @ 0x7
   244  000008                     	ds	20
   245  00001C                     wtf@a:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x1B
   249  00001C                     	ds	2
   250  00001E                     wtf@a_879:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x1D
   254  00001E                     	ds	2
   255  000020                     wtf@b:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x1F
   259  000020                     	ds	1
   260  000021                     wtf@b_880:
   261                           	opt stack 0
   262                           
   263                           ; 1 bytes @ 0x20
   264  000021                     	ds	1
   265  000022                     ??_MyadcRead:
   266  000022                     PWM1_Init@setDuty:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0x21
   270  000022                     	ds	4
   271  000026                     tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           ; 1 bytes @ 0x25
   281 ;;
   282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   283 ;;
   284 ;; *************** function _main *****************
   285 ;; Defined at:
   286 ;;		line 164 in file "newmain.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;		None
   289 ;; Auto vars:     Size  Location     Type
   290 ;;		None
   291 ;; Return value:  Size  Location     Type
   292 ;;                  1    wreg      void 
   293 ;; Registers used:
   294 ;;		wreg, status,2, status,0, cstack
   295 ;; Tracked objects:
   296 ;;		On entry : 0/0
   297 ;;		On exit  : 0/0
   298 ;;		Unchanged: 0/0
   299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   300 ;;      Params:         0       0       0       0       0       0       0
   301 ;;      Locals:         0       0       0       0       0       0       0
   302 ;;      Temps:          0       0       0       0       0       0       0
   303 ;;      Totals:         0       0       0       0       0       0       0
   304 ;;Total ram usage:        0 bytes
   305 ;; Hardware stack levels required when called:    3
   306 ;; This function calls:
   307 ;;		_MyadcRead
   308 ;;		_PWM1_Init
   309 ;;		_PWM1_Start
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text0
   316  000470                     __ptext0:
   317                           	opt stack 0
   318  000470                     _main:
   319                           	opt stack 28
   320                           
   321                           ;newmain.c: 166: PWM1_Init(155);
   322                           
   323                           ;incstack = 0
   324  000470  0E9B               	movlw	155
   325  000472  6E22               	movwf	PWM1_Init@setDuty,c
   326  000474  0E00               	movlw	0
   327  000476  6E23               	movwf	PWM1_Init@setDuty+1,c
   328  000478  0E00               	movlw	0
   329  00047A  6E24               	movwf	PWM1_Init@setDuty+2,c
   330  00047C  0E00               	movlw	0
   331  00047E  6E25               	movwf	PWM1_Init@setDuty+3,c
   332  000480  EC4B  F002         	call	_PWM1_Init	;wreg free
   333                           
   334                           ;newmain.c: 167: PWM1_Start();
   335  000484  EC61  F001         	call	_PWM1_Start	;wreg free
   336  000488                     
   337                           ;newmain.c: 170: MyadcRead();
   338  000488  EC26  F002         	call	_MyadcRead	;wreg free
   339  00048C  D7FD               	goto	l113
   340  00048E                     __end_of_main:
   341                           	opt stack 0
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351 ;; *************** function _PWM1_Start *****************
   352 ;; Defined at:
   353 ;;		line 44 in file "newmain.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  2   85[None  ] int 
   360 ;; Registers used:
   361 ;;		wreg, status,2
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   367 ;;      Params:         0       0       0       0       0       0       0
   368 ;;      Locals:         0       0       0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0       0       0
   370 ;;      Totals:         0       0       0       0       0       0       0
   371 ;;Total ram usage:        0 bytes
   372 ;; Hardware stack levels used:    1
   373 ;; Hardware stack levels required when called:    2
   374 ;; This function calls:
   375 ;;		Nothing
   376 ;; This function is called by:
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text1
   382  0002C2                     __ptext1:
   383                           	opt stack 0
   384  0002C2                     _PWM1_Start:
   385                           	opt stack 28
   386                           
   387                           ;newmain.c: 46: TRISCbits.TRISC6 = 1;
   388                           
   389                           ;incstack = 0
   390  0002C2  8C94               	bsf	3988,6,c	;volatile
   391                           
   392                           ;newmain.c: 47: TRISCbits.TRISC7 = 1;
   393  0002C4  8E94               	bsf	3988,7,c	;volatile
   394                           
   395                           ;newmain.c: 48: TRISDbits.RD0 = 0;
   396  0002C6  9095               	bcf	3989,0,c	;volatile
   397                           
   398                           ;newmain.c: 49: TRISDbits.RD1 = 0;
   399  0002C8  9295               	bcf	3989,1,c	;volatile
   400                           
   401                           ;newmain.c: 60: BAUDCONbits.BRG16 = 1 ;
   402  0002CA  86B8               	bsf	4024,3,c	;volatile
   403                           
   404                           ;newmain.c: 61: TXSTAbits.BRGH = 1;
   405  0002CC  84AC               	bsf	4012,2,c	;volatile
   406                           
   407                           ;newmain.c: 62: SPBRG = 25;
   408  0002CE  0E19               	movlw	25
   409  0002D0  6EAF               	movwf	4015,c	;volatile
   410                           
   411                           ;newmain.c: 65: TXSTAbits.SYNC = 0;
   412  0002D2  98AC               	bcf	4012,4,c	;volatile
   413                           
   414                           ;newmain.c: 66: RCSTAbits.SPEN = 1;
   415  0002D4  8EAB               	bsf	4011,7,c	;volatile
   416                           
   417                           ;newmain.c: 69: PIR1bits.TXIF = 1;
   418  0002D6  889E               	bsf	3998,4,c	;volatile
   419                           
   420                           ;newmain.c: 70: PIR1bits.RCIF = 0;
   421  0002D8  9A9E               	bcf	3998,5,c	;volatile
   422                           
   423                           ;newmain.c: 71: TXSTAbits.TXEN = 1;
   424  0002DA  8AAC               	bsf	4012,5,c	;volatile
   425                           
   426                           ;newmain.c: 72: RCSTAbits.CREN = 1;
   427  0002DC  88AB               	bsf	4011,4,c	;volatile
   428                           
   429                           ;newmain.c: 76: PIE1bits.RCIE = 1;
   430  0002DE  8A9D               	bsf	3997,5,c	;volatile
   431                           
   432                           ;newmain.c: 77: IPR1bits.RCIP = 0;
   433  0002E0  9A9F               	bcf	3999,5,c	;volatile
   434                           
   435                           ;newmain.c: 80: ADCON1bits.VCFG1 = 0 ;
   436  0002E2  9AC1               	bcf	4033,5,c	;volatile
   437                           
   438                           ;newmain.c: 81: ADCON1bits.VCFG0 = 0 ;
   439  0002E4  98C1               	bcf	4033,4,c	;volatile
   440                           
   441                           ;newmain.c: 82: ADCON1bits.PCFG = 1;
   442  0002E6  50C1               	movf	4033,w,c	;volatile
   443  0002E8  0BF0               	andlw	-16
   444  0002EA  0901               	iorlw	1
   445  0002EC  6EC1               	movwf	4033,c	;volatile
   446                           
   447                           ;newmain.c: 83: ADCON0bits.CHS = 0 ;
   448  0002EE  94C2               	bcf	4034,2,c	;volatile
   449  0002F0  96C2               	bcf	4034,3,c	;volatile
   450  0002F2  98C2               	bcf	4034,4,c	;volatile
   451  0002F4  9AC2               	bcf	4034,5,c	;volatile
   452                           
   453                           ;newmain.c: 84: TRISAbits.RA0 = 1 ;
   454  0002F6  8092               	bsf	3986,0,c	;volatile
   455                           
   456                           ;newmain.c: 85: ADCON2bits.ADFM = 1 ;
   457  0002F8  8EC0               	bsf	4032,7,c	;volatile
   458                           
   459                           ;newmain.c: 87: ADCON2bits.ACQT = 1;
   460  0002FA  50C0               	movf	4032,w,c	;volatile
   461  0002FC  0BC7               	andlw	-57
   462  0002FE  0908               	iorlw	8
   463  000300  6EC0               	movwf	4032,c	;volatile
   464                           
   465                           ;newmain.c: 88: ADCON2bits.ADCS = 0;
   466  000302  90C0               	bcf	4032,0,c	;volatile
   467  000304  92C0               	bcf	4032,1,c	;volatile
   468  000306  94C0               	bcf	4032,2,c	;volatile
   469                           
   470                           ;newmain.c: 89: ADCON0bits.ADON = 1;
   471  000308  80C2               	bsf	4034,0,c	;volatile
   472                           
   473                           ;newmain.c: 91: RCONbits.IPEN=0x01;
   474  00030A  8ED0               	bsf	4048,7,c	;volatile
   475                           
   476                           ;newmain.c: 92: INTCONbits.GIEH = 1;
   477  00030C  8EF2               	bsf	intcon,7,c	;volatile
   478                           
   479                           ;newmain.c: 93: INTCONbits.GIEL = 1;
   480  00030E  8CF2               	bsf	intcon,6,c	;volatile
   481                           
   482                           ;newmain.c: 96: T1CON = 0x95;
   483  000310  0E95               	movlw	149
   484  000312  6ECD               	movwf	4045,c	;volatile
   485                           
   486                           ;newmain.c: 97: CCP1CON = 0b00001100;
   487  000314  0E0C               	movlw	12
   488  000316  6EBD               	movwf	4029,c	;volatile
   489                           
   490                           ;newmain.c: 98: T2CON = 0x07;
   491  000318  0E07               	movlw	7
   492  00031A  6ECA               	movwf	4042,c	;volatile
   493                           
   494                           ;newmain.c: 100: OSCCONbits.IRCF2 = 1;
   495  00031C  8CD3               	bsf	4051,6,c	;volatile
   496                           
   497                           ;newmain.c: 101: OSCCONbits.IRCF1 = 0;
   498  00031E  9AD3               	bcf	4051,5,c	;volatile
   499                           
   500                           ;newmain.c: 102: OSCCONbits.IRCF0 = 0;
   501  000320  98D3               	bcf	4051,4,c	;volatile
   502                           
   503                           ;newmain.c: 103: TRISCbits.RC2 = 0;
   504  000322  9494               	bcf	3988,2,c	;volatile
   505                           
   506                           ;newmain.c: 105: PIE1bits.TMR1IE=1;
   507  000324  809D               	bsf	3997,0,c	;volatile
   508                           
   509                           ;newmain.c: 106: IPR1bits.TMR1IP=1;
   510  000326  809F               	bsf	3999,0,c	;volatile
   511                           
   512                           ;newmain.c: 107: PIR1bits.TMR1IF=0;
   513  000328  909E               	bcf	3998,0,c	;volatile
   514                           
   515                           ;newmain.c: 109: TMR1 = 34285;
   516  00032A  0E85               	movlw	133
   517  00032C  6ECF               	movwf	4047,c	;volatile
   518  00032E  0EED               	movlw	237
   519  000330  6ECE               	movwf	4046,c	;volatile
   520  000332  0012               	return		;funcret
   521  000334                     __end_of_PWM1_Start:
   522                           	opt stack 0
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           intcon	equ	0xFF2
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postdec1	equ	0xFE5
   531                           fsr1l	equ	0xFE1
   532                           
   533 ;; *************** function _PWM1_Init *****************
   534 ;; Defined at:
   535 ;;		line 31 in file "newmain.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  setDuty         4   33[COMRAM] long 
   538 ;; Auto vars:     Size  Location     Type
   539 ;;		None
   540 ;; Return value:  Size  Location     Type
   541 ;;                  2   33[COMRAM] int 
   542 ;; Registers used:
   543 ;;		None
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   549 ;;      Params:         4       0       0       0       0       0       0
   550 ;;      Locals:         0       0       0       0       0       0       0
   551 ;;      Temps:          0       0       0       0       0       0       0
   552 ;;      Totals:         4       0       0       0       0       0       0
   553 ;;Total ram usage:        4 bytes
   554 ;; Hardware stack levels used:    1
   555 ;; Hardware stack levels required when called:    2
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text2
   564  000496                     __ptext2:
   565                           	opt stack 0
   566  000496                     _PWM1_Init:
   567                           	opt stack 28
   568                           
   569                           ;newmain.c: 33: PR2 = setDuty;
   570                           
   571                           ;incstack = 0
   572  000496  C022  FFCB         	movff	PWM1_Init@setDuty,4043	;volatile
   573  00049A  0012               	return		;funcret
   574  00049C                     __end_of_PWM1_Init:
   575                           	opt stack 0
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           intcon	equ	0xFF2
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1l	equ	0xFE1
   585                           
   586 ;; *************** function _MyadcRead *****************
   587 ;; Defined at:
   588 ;;		line 112 in file "newmain.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;		None
   591 ;; Auto vars:     Size  Location     Type
   592 ;;		None
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      void 
   595 ;; Registers used:
   596 ;;		wreg, status,2, status,0
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   602 ;;      Params:         0       0       0       0       0       0       0
   603 ;;      Locals:         0       0       0       0       0       0       0
   604 ;;      Temps:          3       0       0       0       0       0       0
   605 ;;      Totals:         3       0       0       0       0       0       0
   606 ;;Total ram usage:        3 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; Hardware stack levels required when called:    2
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text3
   617  00044C                     __ptext3:
   618                           	opt stack 0
   619  00044C                     _MyadcRead:
   620                           	opt stack 28
   621                           
   622                           ;newmain.c: 114: while(ADCON0bits.GO == 1);
   623                           
   624                           ;incstack = 0
   625  00044C  B2C2               	btfsc	4034,1,c	;volatile
   626  00044E  D7FE               	goto	_MyadcRead
   627                           
   628                           ;newmain.c: 115: ADCON0bits.GO = 1;
   629  000450  82C2               	bsf	4034,1,c	;volatile
   630                           
   631                           ;newmain.c: 116: MyadcValue = ADRESL;
   632  000452  CFC3 F02C          	movff	4035,_MyadcValue	;volatile
   633  000456  6A2D               	clrf	_MyadcValue+1,c
   634                           
   635                           ;newmain.c: 117: MyadcValue |= (ADRESH & 3) << 8;
   636  000458  CFC4 F022          	movff	4036,??_MyadcRead	;volatile
   637  00045C  0E03               	movlw	3
   638  00045E  1622               	andwf	??_MyadcRead,f,c
   639  000460  5022               	movf	??_MyadcRead,w,c
   640  000462  6E24               	movwf	(??_MyadcRead+2)& (0+255),c
   641  000464  6A23               	clrf	(??_MyadcRead+1)& (0+255),c
   642  000466  5023               	movf	??_MyadcRead+1,w,c
   643  000468  122C               	iorwf	_MyadcValue,f,c
   644  00046A  5024               	movf	??_MyadcRead+2,w,c
   645  00046C  122D               	iorwf	_MyadcValue+1,f,c
   646  00046E  0012               	return	
   647  000470                     __end_of_MyadcRead:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           intcon	equ	0xFF2
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postdec1	equ	0xFE5
   657                           fsr1l	equ	0xFE1
   658                           
   659 ;; *************** function _wtf *****************
   660 ;; Defined at:
   661 ;;		line 174 in file "newmain.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;		None
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  a               2   27[COMRAM] int 
   666 ;;  b               1   31[COMRAM] unsigned char 
   667 ;;  a               2   29[COMRAM] int 
   668 ;;  b               1   32[COMRAM] unsigned char 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, status,2, status,0, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   678 ;;      Params:         0       0       0       0       0       0       0
   679 ;;      Locals:         6       0       0       0       0       0       0
   680 ;;      Temps:         20       0       0       0       0       0       0
   681 ;;      Totals:        26       0       0       0       0       0       0
   682 ;;Total ram usage:       26 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    1
   685 ;; This function calls:
   686 ;;		_Myusartwrite
   687 ;;		_PWM1_Duty
   688 ;;		___lwdiv
   689 ;;		___lwmod
   690 ;;		_checker
   691 ;; This function is called by:
   692 ;;		Interrupt level 2
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	intcode
   697  000008                     __pintcode:
   698                           	opt stack 0
   699  000008                     _wtf:
   700                           	opt stack 28
   701                           
   702                           ;incstack = 0
   703  000008  8233               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   704  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           intcon	equ	0xFF2
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	intcode_body
   716  000012                     __pintcode_body:
   717                           	opt stack 28
   718  000012                     int_func:
   719                           	opt stack 28
   720  000012  0006               	pop		; remove dummy address from shadow register refresh
   721  000014  CFFA F00A          	movff	pclath,??_wtf+2
   722  000018  CFFB F00B          	movff	pclatu,??_wtf+3
   723  00001C  CFE9 F00C          	movff	fsr0l,??_wtf+4
   724  000020  CFEA F00D          	movff	fsr0h,??_wtf+5
   725  000024  CFE1 F00E          	movff	fsr1l,??_wtf+6
   726  000028  CFE2 F00F          	movff	fsr1h,??_wtf+7
   727  00002C  CFD9 F010          	movff	fsr2l,??_wtf+8
   728  000030  CFDA F011          	movff	fsr2h,??_wtf+9
   729  000034  CFF3 F012          	movff	prodl,??_wtf+10
   730  000038  CFF4 F013          	movff	prodh,??_wtf+11
   731  00003C  CFF6 F014          	movff	tblptrl,??_wtf+12
   732  000040  CFF7 F015          	movff	tblptrh,??_wtf+13
   733  000044  CFF8 F016          	movff	tblptru,??_wtf+14
   734  000048  CFF5 F017          	movff	tablat,??_wtf+15
   735  00004C  C033  F018         	movff	btemp,??_wtf+16
   736  000050  C034  F019         	movff	btemp+1,??_wtf+17
   737  000054  C035  F01A         	movff	btemp+2,??_wtf+18
   738  000058  C036  F01B         	movff	btemp+3,??_wtf+19
   739                           
   740                           ;newmain.c: 176: if(TMR1IE && TMR1IF){
   741  00005C  B09D               	btfsc	3997,0,c	;volatile
   742  00005E  A09E               	btfss	3998,0,c	;volatile
   743  000060  D07F               	goto	i2l125
   744                           
   745                           ;newmain.c: 177: TMR1 = 34285;
   746  000062  0E85               	movlw	133
   747  000064  6ECF               	movwf	4047,c	;volatile
   748  000066  0EED               	movlw	237
   749  000068  6ECE               	movwf	4046,c	;volatile
   750                           
   751                           ;newmain.c: 178: if( i > 600 ) lolflag = -38;
   752  00006A  BE32               	btfsc	_i+1,7,c
   753  00006C  D00A               	goto	i2l122
   754  00006E  0E59               	movlw	89
   755  000070  5C31               	subwf	_i,w,c
   756  000072  0E02               	movlw	2
   757  000074  5832               	subwfb	_i+1,w,c
   758  000076  A0D8               	btfss	status,0,c
   759  000078  D004               	goto	i2l122
   760  00007A  0EFF               	movlw	255
   761  00007C  6E30               	movwf	_lolflag+1,c
   762  00007E  0EDA               	movlw	218
   763  000080  D00E               	goto	L1
   764  000082                     i2l122:
   765                           
   766                           ;newmain.c: 179: else if( i < 1) {
   767  000082  BE32               	btfsc	_i+1,7,c
   768  000084  D005               	goto	i2u29_40
   769  000086  5032               	movf	_i+1,w,c
   770  000088  E10B               	bnz	i2l1076
   771  00008A  0431               	decf	_i,w,c
   772  00008C  B0D8               	btfsc	status,0,c
   773  00008E  D008               	goto	i2l124
   774  000090                     i2u29_40:
   775                           
   776                           ;newmain.c: 180: i = 1;
   777  000090  0E00               	movlw	0
   778  000092  6E32               	movwf	_i+1,c
   779  000094  0E01               	movlw	1
   780  000096  6E31               	movwf	_i,c
   781                           
   782                           ;newmain.c: 181: lolflag = 38;
   783  000098  0E00               	movlw	0
   784  00009A  6E30               	movwf	_lolflag+1,c
   785  00009C  0E26               	movlw	38
   786  00009E                     L1:
   787  00009E  6E2F               	movwf	_lolflag,c
   788  0000A0                     i2l124:
   789  0000A0                     i2l1076:
   790                           
   791                           ;newmain.c: 182: }
   792                           ;newmain.c: 183: PWM1_Duty(i);
   793  0000A0  C031  F001         	movff	_i,PWM1_Duty@duty
   794  0000A4  C032  F002         	movff	_i+1,PWM1_Duty@duty+1
   795  0000A8  ECC3  F001         	call	_PWM1_Duty	;wreg free
   796                           
   797                           ;newmain.c: 185: i += lolflag;
   798  0000AC  502F               	movf	_lolflag,w,c
   799  0000AE  2631               	addwf	_i,f,c
   800  0000B0  5030               	movf	_lolflag+1,w,c
   801  0000B2  2232               	addwfc	_i+1,f,c
   802                           
   803                           ;newmain.c: 186: TMR1IF = 0;
   804  0000B4  909E               	bcf	3998,0,c	;volatile
   805                           
   806                           ;newmain.c: 187: total = total + MyadcValue;
   807  0000B6  502C               	movf	_MyadcValue,w,c
   808  0000B8  242A               	addwf	_total,w,c
   809  0000BA  6E2A               	movwf	_total,c
   810  0000BC  502D               	movf	_MyadcValue+1,w,c
   811  0000BE  202B               	addwfc	_total+1,w,c
   812  0000C0  6E2B               	movwf	_total+1,c
   813                           
   814                           ;newmain.c: 188: timersec++;
   815  0000C2  4A28               	infsnz	_timersec,f,c
   816  0000C4  2A29               	incf	_timersec+1,f,c
   817                           
   818                           ;newmain.c: 190: if(timersec == 4) {
   819  0000C6  0E04               	movlw	4
   820  0000C8  1828               	xorwf	_timersec,w,c
   821  0000CA  1029               	iorwf	_timersec+1,w,c
   822  0000CC  A4D8               	btfss	status,2,c
   823  0000CE  D048               	goto	i2l125
   824                           
   825                           ;newmain.c: 191: if(au == 1) {
   826  0000D0  0426               	decf	_au,w,c
   827  0000D2  1027               	iorwf	_au+1,w,c
   828  0000D4  A4D8               	btfss	status,2,c
   829  0000D6  D03C               	goto	i2l126
   830                           
   831                           ;newmain.c: 192: total = total/4;
   832  0000D8  C02A  F008         	movff	_total,??_wtf
   833  0000DC  C02B  F009         	movff	_total+1,??_wtf+1
   834  0000E0  90D8               	bcf	status,0,c
   835  0000E2  3209               	rrcf	??_wtf+1,f,c
   836  0000E4  3208               	rrcf	??_wtf,f,c
   837  0000E6  90D8               	bcf	status,0,c
   838  0000E8  3209               	rrcf	??_wtf+1,f,c
   839  0000EA  3208               	rrcf	??_wtf,f,c
   840  0000EC  C008  F02A         	movff	??_wtf,_total
   841  0000F0  C009  F02B         	movff	??_wtf+1,_total+1
   842                           
   843                           ;newmain.c: 193: while( total > 0 ) {
   844  0000F4  D026               	goto	i2l127
   845  0000F6                     
   846                           ;newmain.c: 194: int a = total%10;
   847  0000F6  C02A  F001         	movff	_total,___lwmod@dividend
   848  0000FA  C02B  F002         	movff	_total+1,___lwmod@dividend+1
   849  0000FE  0E00               	movlw	0
   850  000100  6E04               	movwf	___lwmod@divisor+1,c
   851  000102  0E0A               	movlw	10
   852  000104  6E03               	movwf	___lwmod@divisor,c
   853  000106  ECE8  F001         	call	___lwmod	;wreg free
   854  00010A  C001  F01C         	movff	?___lwmod,wtf@a
   855  00010E  C002  F01D         	movff	?___lwmod+1,wtf@a+1
   856                           
   857                           ;newmain.c: 195: char b = checker(a);
   858  000112  C01C  F001         	movff	wtf@a,checker@a
   859  000116  C01D  F002         	movff	wtf@a+1,checker@a+1
   860  00011A  EC1F  F001         	call	_checker	;wreg free
   861  00011E  6E20               	movwf	wtf@b,c
   862                           
   863                           ;newmain.c: 196: Myusartwrite(b);
   864  000120  5020               	movf	wtf@b,w,c
   865  000122  EC47  F002         	call	_Myusartwrite
   866                           
   867                           ;newmain.c: 197: total /= 10;
   868  000126  C02A  F001         	movff	_total,___lwdiv@dividend
   869  00012A  C02B  F002         	movff	_total+1,___lwdiv@dividend+1
   870  00012E  0E00               	movlw	0
   871  000130  6E04               	movwf	___lwdiv@divisor+1,c
   872  000132  0E0A               	movlw	10
   873  000134  6E03               	movwf	___lwdiv@divisor,c
   874  000136  EC9A  F001         	call	___lwdiv	;wreg free
   875  00013A  C001  F02A         	movff	?___lwdiv,_total
   876  00013E  C002  F02B         	movff	?___lwdiv+1,_total+1
   877  000142                     i2l127:
   878  000142  502A               	movf	_total,w,c
   879  000144  102B               	iorwf	_total+1,w,c
   880  000146  A4D8               	btfss	status,2,c
   881  000148  D7D6               	goto	i2l128
   882                           
   883                           ;newmain.c: 198: }
   884                           ;newmain.c: 199: Myusartwrite(' ');
   885  00014A  0E20               	movlw	32
   886  00014C  EC47  F002         	call	_Myusartwrite
   887  000150                     i2l126:
   888                           
   889                           ;newmain.c: 200: }
   890                           ;newmain.c: 203: timersec = 0;
   891  000150  0E00               	movlw	0
   892  000152  6E29               	movwf	_timersec+1,c
   893  000154  0E00               	movlw	0
   894  000156  6E28               	movwf	_timersec,c
   895                           
   896                           ;newmain.c: 204: total = 0;
   897  000158  0E00               	movlw	0
   898  00015A  6E2B               	movwf	_total+1,c
   899  00015C  0E00               	movlw	0
   900  00015E  6E2A               	movwf	_total,c
   901  000160                     i2l125:
   902                           
   903                           ;newmain.c: 205: }
   904                           ;newmain.c: 206: }
   905                           ;newmain.c: 207: if(RCIF) {
   906  000160  AA9E               	btfss	3998,5,c	;volatile
   907  000162  D047               	goto	i2l137
   908                           
   909                           ;newmain.c: 208: global = RCREG;
   910  000164  CFAE F02E          	movff	4014,_global	;volatile
   911                           
   912                           ;newmain.c: 209: if(global == 'p') {
   913  000168  0E70               	movlw	112
   914  00016A  182E               	xorwf	_global,w,c
   915  00016C  A4D8               	btfss	status,2,c
   916  00016E  D031               	goto	i2l131
   917                           
   918                           ;newmain.c: 210: Myusartwrite('p');
   919  000170  0E70               	movlw	112
   920  000172  EC47  F002         	call	_Myusartwrite
   921                           
   922                           ;newmain.c: 211: while( MyadcValue > 0 ) {
   923  000176  D026               	goto	i2l132
   924  000178                     
   925                           ;newmain.c: 212: int a = MyadcValue%10;
   926  000178  C02C  F001         	movff	_MyadcValue,___lwmod@dividend
   927  00017C  C02D  F002         	movff	_MyadcValue+1,___lwmod@dividend+1
   928  000180  0E00               	movlw	0
   929  000182  6E04               	movwf	___lwmod@divisor+1,c
   930  000184  0E0A               	movlw	10
   931  000186  6E03               	movwf	___lwmod@divisor,c
   932  000188  ECE8  F001         	call	___lwmod	;wreg free
   933  00018C  C001  F01E         	movff	?___lwmod,wtf@a_879
   934  000190  C002  F01F         	movff	?___lwmod+1,wtf@a_879+1
   935                           
   936                           ;newmain.c: 213: char b = checker(a);
   937  000194  C01E  F001         	movff	wtf@a_879,checker@a
   938  000198  C01F  F002         	movff	wtf@a_879+1,checker@a+1
   939  00019C  EC1F  F001         	call	_checker	;wreg free
   940  0001A0  6E21               	movwf	wtf@b_880,c
   941                           
   942                           ;newmain.c: 214: Myusartwrite(b);
   943  0001A2  5021               	movf	wtf@b_880,w,c
   944  0001A4  EC47  F002         	call	_Myusartwrite
   945                           
   946                           ;newmain.c: 215: MyadcValue /= 10;
   947  0001A8  C02C  F001         	movff	_MyadcValue,___lwdiv@dividend
   948  0001AC  C02D  F002         	movff	_MyadcValue+1,___lwdiv@dividend+1
   949  0001B0  0E00               	movlw	0
   950  0001B2  6E04               	movwf	___lwdiv@divisor+1,c
   951  0001B4  0E0A               	movlw	10
   952  0001B6  6E03               	movwf	___lwdiv@divisor,c
   953  0001B8  EC9A  F001         	call	___lwdiv	;wreg free
   954  0001BC  C001  F02C         	movff	?___lwdiv,_MyadcValue
   955  0001C0  C002  F02D         	movff	?___lwdiv+1,_MyadcValue+1
   956  0001C4                     i2l132:
   957  0001C4  502C               	movf	_MyadcValue,w,c
   958  0001C6  102D               	iorwf	_MyadcValue+1,w,c
   959  0001C8  A4D8               	btfss	status,2,c
   960  0001CA  D7D6               	goto	i2l133
   961                           
   962                           ;newmain.c: 216: }
   963                           ;newmain.c: 217: Myusartwrite(' ');
   964  0001CC  0E20               	movlw	32
   965  0001CE  EC47  F002         	call	_Myusartwrite
   966  0001D2                     i2l131:
   967                           
   968                           ;newmain.c: 218: }
   969                           ;newmain.c: 219: if(global == 'a') {
   970  0001D2  0E61               	movlw	97
   971  0001D4  182E               	xorwf	_global,w,c
   972  0001D6  A4D8               	btfss	status,2,c
   973  0001D8  D00C               	goto	i2l137
   974                           
   975                           ;newmain.c: 220: if(au == 1) au = 0;
   976  0001DA  0426               	decf	_au,w,c
   977  0001DC  1027               	iorwf	_au+1,w,c
   978  0001DE  A4D8               	btfss	status,2,c
   979  0001E0  D004               	goto	i2l136
   980  0001E2  0E00               	movlw	0
   981  0001E4  6E27               	movwf	_au+1,c
   982  0001E6  0E00               	movlw	0
   983  0001E8  D003               	goto	L2
   984  0001EA                     i2l136:
   985                           
   986                           ;newmain.c: 221: else au = 1;
   987  0001EA  0E00               	movlw	0
   988  0001EC  6E27               	movwf	_au+1,c
   989  0001EE  0E01               	movlw	1
   990  0001F0                     L2:
   991  0001F0  6E26               	movwf	_au,c
   992  0001F2                     i2l137:
   993  0001F2  C01B  F036         	movff	??_wtf+19,btemp+3
   994  0001F6  C01A  F035         	movff	??_wtf+18,btemp+2
   995  0001FA  C019  F034         	movff	??_wtf+17,btemp+1
   996  0001FE  C018  F033         	movff	??_wtf+16,btemp
   997  000202  C017  FFF5         	movff	??_wtf+15,tablat
   998  000206  C016  FFF8         	movff	??_wtf+14,tblptru
   999  00020A  C015  FFF7         	movff	??_wtf+13,tblptrh
  1000  00020E  C014  FFF6         	movff	??_wtf+12,tblptrl
  1001  000212  C013  FFF4         	movff	??_wtf+11,prodh
  1002  000216  C012  FFF3         	movff	??_wtf+10,prodl
  1003  00021A  C011  FFDA         	movff	??_wtf+9,fsr2h
  1004  00021E  C010  FFD9         	movff	??_wtf+8,fsr2l
  1005  000222  C00F  FFE2         	movff	??_wtf+7,fsr1h
  1006  000226  C00E  FFE1         	movff	??_wtf+6,fsr1l
  1007  00022A  C00D  FFEA         	movff	??_wtf+5,fsr0h
  1008  00022E  C00C  FFE9         	movff	??_wtf+4,fsr0l
  1009  000232  C00B  FFFB         	movff	??_wtf+3,pclatu
  1010  000236  C00A  FFFA         	movff	??_wtf+2,pclath
  1011  00023A  9233               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1012  00023C  0011               	retfie		f
  1013  00023E                     __end_of_wtf:
  1014                           	opt stack 0
  1015                           pclatu	equ	0xFFB
  1016                           pclath	equ	0xFFA
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           intcon	equ	0xFF2
  1024                           postinc0	equ	0xFEE
  1025                           fsr0h	equ	0xFEA
  1026                           fsr0l	equ	0xFE9
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           fsr2h	equ	0xFDA
  1032                           fsr2l	equ	0xFD9
  1033                           status	equ	0xFD8
  1034                           
  1035 ;; *************** function _checker *****************
  1036 ;; Defined at:
  1037 ;;		line 122 in file "newmain.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  a               2    0[COMRAM] int 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  aChar           1    4[COMRAM] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      unsigned char 
  1044 ;; Registers used:
  1045 ;;		wreg, status,2, status,0
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1051 ;;      Params:         2       0       0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0       0       0
  1053 ;;      Temps:          2       0       0       0       0       0       0
  1054 ;;      Totals:         5       0       0       0       0       0       0
  1055 ;;Total ram usage:        5 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_wtf
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text5
  1065  00023E                     __ptext5:
  1066                           	opt stack 0
  1067  00023E                     _checker:
  1068                           	opt stack 28
  1069                           
  1070                           ;newmain.c: 124: char aChar;
  1071                           ;newmain.c: 125: switch (a)
  1072                           
  1073                           ;incstack = 0
  1074  00023E  D017               	goto	i2l95
  1075  000240                     
  1076                           ;newmain.c: 128: aChar = '0';
  1077  000240  0E30               	movlw	48
  1078  000242  D013               	goto	L12
  1079  000244                     
  1080                           ;newmain.c: 131: aChar = '1';
  1081  000244  0E31               	movlw	49
  1082  000246  D011               	goto	L12
  1083  000248                     
  1084                           ;newmain.c: 134: aChar = '2';
  1085  000248  0E32               	movlw	50
  1086  00024A  D00F               	goto	L12
  1087  00024C                     
  1088                           ;newmain.c: 137: aChar = '3';
  1089  00024C  0E33               	movlw	51
  1090  00024E  D00D               	goto	L12
  1091  000250                     
  1092                           ;newmain.c: 140: aChar = '4';
  1093  000250  0E34               	movlw	52
  1094  000252  D00B               	goto	L12
  1095  000254                     
  1096                           ;newmain.c: 143: aChar = '5';
  1097  000254  0E35               	movlw	53
  1098  000256  D009               	goto	L12
  1099  000258                     
  1100                           ;newmain.c: 146: aChar = '6';
  1101  000258  0E36               	movlw	54
  1102  00025A  D007               	goto	L12
  1103  00025C                     
  1104                           ;newmain.c: 149: aChar = '7';
  1105  00025C  0E37               	movlw	55
  1106  00025E  D005               	goto	L12
  1107  000260                     
  1108                           ;newmain.c: 152: aChar = '8';
  1109  000260  0E38               	movlw	56
  1110  000262  D003               	goto	L12
  1111  000264                     
  1112                           ;newmain.c: 155: aChar = '9';
  1113  000264  0E39               	movlw	57
  1114  000266  D001               	goto	L12
  1115  000268                     
  1116                           ;newmain.c: 158: aChar = '?';
  1117  000268  0E3F               	movlw	63
  1118  00026A                     L12:
  1119  00026A  6E05               	movwf	checker@aChar,c
  1120                           
  1121                           ;newmain.c: 160: }
  1122                           
  1123                           ;newmain.c: 159: break;
  1124  00026C  D028               	goto	i2l97
  1125  00026E                     i2l95:
  1126  00026E  C001  F003         	movff	checker@a,??_checker
  1127  000272  C002  F004         	movff	checker@a+1,??_checker+1
  1128                           
  1129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1130                           ; Switch size 1, requested type "space"
  1131                           ; Number of cases is 1, Range of values is 0 to 0
  1132                           ; switch strategies available:
  1133                           ; Name         Instructions Cycles
  1134                           ; simple_byte            4     3 (average)
  1135                           ;	Chosen strategy is simple_byte
  1136  000276  5004               	movf	??_checker+1,w,c
  1137  000278  0A00               	xorlw	0	; case 0
  1138  00027A  A4D8               	btfss	status,2,c
  1139  00027C  D7F5               	goto	i2l107
  1140                           
  1141                           ; Switch size 1, requested type "space"
  1142                           ; Number of cases is 10, Range of values is 0 to 9
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte           31    16 (average)
  1146                           ;	Chosen strategy is simple_byte
  1147  00027E  5003               	movf	??_checker,w,c
  1148  000280  0A00               	xorlw	0	; case 0
  1149  000282  B4D8               	btfsc	status,2,c
  1150  000284  D7DD               	goto	i2l96
  1151  000286  0A01               	xorlw	1	; case 1
  1152  000288  B4D8               	btfsc	status,2,c
  1153  00028A  D7DC               	goto	i2l98
  1154  00028C  0A03               	xorlw	3	; case 2
  1155  00028E  B4D8               	btfsc	status,2,c
  1156  000290  D7DB               	goto	i2l99
  1157  000292  0A01               	xorlw	1	; case 3
  1158  000294  B4D8               	btfsc	status,2,c
  1159  000296  D7DA               	goto	i2l100
  1160  000298  0A07               	xorlw	7	; case 4
  1161  00029A  B4D8               	btfsc	status,2,c
  1162  00029C  D7D9               	goto	i2l101
  1163  00029E  0A01               	xorlw	1	; case 5
  1164  0002A0  B4D8               	btfsc	status,2,c
  1165  0002A2  D7D8               	goto	i2l102
  1166  0002A4  0A03               	xorlw	3	; case 6
  1167  0002A6  B4D8               	btfsc	status,2,c
  1168  0002A8  D7D7               	goto	i2l103
  1169  0002AA  0A01               	xorlw	1	; case 7
  1170  0002AC  B4D8               	btfsc	status,2,c
  1171  0002AE  D7D6               	goto	i2l104
  1172  0002B0  0A0F               	xorlw	15	; case 8
  1173  0002B2  B4D8               	btfsc	status,2,c
  1174  0002B4  D7D5               	goto	i2l105
  1175  0002B6  0A01               	xorlw	1	; case 9
  1176  0002B8  B4D8               	btfsc	status,2,c
  1177  0002BA  D7D4               	goto	i2l106
  1178  0002BC  D7D5               	goto	i2l107
  1179  0002BE                     i2l97:
  1180                           
  1181                           ;newmain.c: 161: return aChar;
  1182  0002BE  5005               	movf	checker@aChar,w,c
  1183  0002C0  0012               	return	
  1184  0002C2                     __end_of_checker:
  1185                           	opt stack 0
  1186                           pclatu	equ	0xFFB
  1187                           pclath	equ	0xFFA
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           prodh	equ	0xFF4
  1193                           prodl	equ	0xFF3
  1194                           intcon	equ	0xFF2
  1195                           postinc0	equ	0xFEE
  1196                           fsr0h	equ	0xFEA
  1197                           fsr0l	equ	0xFE9
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1h	equ	0xFE2
  1201                           fsr1l	equ	0xFE1
  1202                           fsr2h	equ	0xFDA
  1203                           fsr2l	equ	0xFD9
  1204                           status	equ	0xFD8
  1205                           
  1206 ;; *************** function ___lwmod *****************
  1207 ;; Defined at:
  1208 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  dividend        2    0[COMRAM] unsigned int 
  1211 ;;  divisor         2    2[COMRAM] unsigned int 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  counter         1    4[COMRAM] unsigned char 
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  2    0[COMRAM] unsigned int 
  1216 ;; Registers used:
  1217 ;;		wreg, status,2, status,0
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1223 ;;      Params:         4       0       0       0       0       0       0
  1224 ;;      Locals:         1       0       0       0       0       0       0
  1225 ;;      Temps:          0       0       0       0       0       0       0
  1226 ;;      Totals:         5       0       0       0       0       0       0
  1227 ;;Total ram usage:        5 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_wtf
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text6
  1237  0003D0                     __ptext6:
  1238                           	opt stack 0
  1239  0003D0                     ___lwmod:
  1240                           	opt stack 28
  1241                           
  1242                           ;incstack = 0
  1243  0003D0  5003               	movf	___lwmod@divisor,w,c
  1244  0003D2  1004               	iorwf	___lwmod@divisor+1,w,c
  1245  0003D4  B4D8               	btfsc	status,2,c
  1246  0003D6  D018               	goto	i2l557
  1247  0003D8  0E01               	movlw	1
  1248  0003DA  6E05               	movwf	___lwmod@counter,c
  1249  0003DC  D004               	goto	i2l552
  1250  0003DE  90D8               	bcf	status,0,c
  1251  0003E0  3603               	rlcf	___lwmod@divisor,f,c
  1252  0003E2  3604               	rlcf	___lwmod@divisor+1,f,c
  1253  0003E4  2A05               	incf	___lwmod@counter,f,c
  1254  0003E6                     i2l552:
  1255  0003E6  AE04               	btfss	___lwmod@divisor+1,7,c
  1256  0003E8  D7FA               	goto	i2l553
  1257  0003EA                     i2u24_40:
  1258  0003EA  5003               	movf	___lwmod@divisor,w,c
  1259  0003EC  5C01               	subwf	___lwmod@dividend,w,c
  1260  0003EE  5004               	movf	___lwmod@divisor+1,w,c
  1261  0003F0  5802               	subwfb	___lwmod@dividend+1,w,c
  1262  0003F2  A0D8               	btfss	status,0,c
  1263  0003F4  D004               	goto	i2l556
  1264  0003F6  5003               	movf	___lwmod@divisor,w,c
  1265  0003F8  5E01               	subwf	___lwmod@dividend,f,c
  1266  0003FA  5004               	movf	___lwmod@divisor+1,w,c
  1267  0003FC  5A02               	subwfb	___lwmod@dividend+1,f,c
  1268  0003FE                     i2l556:
  1269  0003FE  90D8               	bcf	status,0,c
  1270  000400  3204               	rrcf	___lwmod@divisor+1,f,c
  1271  000402  3203               	rrcf	___lwmod@divisor,f,c
  1272  000404  2E05               	decfsz	___lwmod@counter,f,c
  1273  000406  D7F1               	goto	i2u24_40
  1274  000408                     i2l557:
  1275  000408  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1276  00040C  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1277  000410  0012               	return		;funcret
  1278  000412                     __end_of___lwmod:
  1279                           	opt stack 0
  1280                           pclatu	equ	0xFFB
  1281                           pclath	equ	0xFFA
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           prodh	equ	0xFF4
  1287                           prodl	equ	0xFF3
  1288                           intcon	equ	0xFF2
  1289                           postinc0	equ	0xFEE
  1290                           fsr0h	equ	0xFEA
  1291                           fsr0l	equ	0xFE9
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1h	equ	0xFE2
  1295                           fsr1l	equ	0xFE1
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function ___lwdiv *****************
  1301 ;; Defined at:
  1302 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  dividend        2    0[COMRAM] unsigned int 
  1305 ;;  divisor         2    2[COMRAM] unsigned int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  quotient        2    4[COMRAM] unsigned int 
  1308 ;;  counter         1    6[COMRAM] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2    0[COMRAM] unsigned int 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:         4       0       0       0       0       0       0
  1319 ;;      Locals:         3       0       0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0
  1321 ;;      Totals:         7       0       0       0       0       0       0
  1322 ;;Total ram usage:        7 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_wtf
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text7
  1332  000334                     __ptext7:
  1333                           	opt stack 0
  1334  000334                     ___lwdiv:
  1335                           	opt stack 28
  1336                           
  1337                           ;incstack = 0
  1338  000334  0E00               	movlw	0
  1339  000336  6E06               	movwf	___lwdiv@quotient+1,c
  1340  000338  0E00               	movlw	0
  1341  00033A  6E05               	movwf	___lwdiv@quotient,c
  1342  00033C  5003               	movf	___lwdiv@divisor,w,c
  1343  00033E  1004               	iorwf	___lwdiv@divisor+1,w,c
  1344  000340  B4D8               	btfsc	status,2,c
  1345  000342  D01C               	goto	i2l547
  1346  000344  0E01               	movlw	1
  1347  000346  6E07               	movwf	___lwdiv@counter,c
  1348  000348  D004               	goto	i2l542
  1349  00034A  90D8               	bcf	status,0,c
  1350  00034C  3603               	rlcf	___lwdiv@divisor,f,c
  1351  00034E  3604               	rlcf	___lwdiv@divisor+1,f,c
  1352  000350  2A07               	incf	___lwdiv@counter,f,c
  1353  000352                     i2l542:
  1354  000352  AE04               	btfss	___lwdiv@divisor+1,7,c
  1355  000354  D7FA               	goto	i2l543
  1356  000356                     i2u21_40:
  1357  000356  90D8               	bcf	status,0,c
  1358  000358  3605               	rlcf	___lwdiv@quotient,f,c
  1359  00035A  3606               	rlcf	___lwdiv@quotient+1,f,c
  1360  00035C  5003               	movf	___lwdiv@divisor,w,c
  1361  00035E  5C01               	subwf	___lwdiv@dividend,w,c
  1362  000360  5004               	movf	___lwdiv@divisor+1,w,c
  1363  000362  5802               	subwfb	___lwdiv@dividend+1,w,c
  1364  000364  A0D8               	btfss	status,0,c
  1365  000366  D005               	goto	i2l546
  1366  000368  5003               	movf	___lwdiv@divisor,w,c
  1367  00036A  5E01               	subwf	___lwdiv@dividend,f,c
  1368  00036C  5004               	movf	___lwdiv@divisor+1,w,c
  1369  00036E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1370  000370  8005               	bsf	___lwdiv@quotient,0,c
  1371  000372                     i2l546:
  1372  000372  90D8               	bcf	status,0,c
  1373  000374  3204               	rrcf	___lwdiv@divisor+1,f,c
  1374  000376  3203               	rrcf	___lwdiv@divisor,f,c
  1375  000378  2E07               	decfsz	___lwdiv@counter,f,c
  1376  00037A  D7ED               	goto	i2u21_40
  1377  00037C                     i2l547:
  1378  00037C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1379  000380  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1380  000384  0012               	return		;funcret
  1381  000386                     __end_of___lwdiv:
  1382                           	opt stack 0
  1383                           pclatu	equ	0xFFB
  1384                           pclath	equ	0xFFA
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           prodh	equ	0xFF4
  1390                           prodl	equ	0xFF3
  1391                           intcon	equ	0xFF2
  1392                           postinc0	equ	0xFEE
  1393                           fsr0h	equ	0xFEA
  1394                           fsr0l	equ	0xFE9
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1h	equ	0xFE2
  1398                           fsr1l	equ	0xFE1
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function _PWM1_Duty *****************
  1404 ;; Defined at:
  1405 ;;		line 36 in file "newmain.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  duty            2    0[COMRAM] unsigned int 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  2    0[COMRAM] int 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1419 ;;      Params:         2       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0
  1421 ;;      Temps:          2       0       0       0       0       0       0
  1422 ;;      Totals:         4       0       0       0       0       0       0
  1423 ;;Total ram usage:        4 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_wtf
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text8
  1433  000386                     __ptext8:
  1434                           	opt stack 0
  1435  000386                     _PWM1_Duty:
  1436                           	opt stack 28
  1437                           
  1438                           ;newmain.c: 39: CCP1CONbits.CCP1X = (duty >> 1) & 1;
  1439                           
  1440                           ;incstack = 0
  1441  000386  90D8               	bcf	status,0,c
  1442  000388  3002               	rrcf	PWM1_Duty@duty+1,w,c
  1443  00038A  6E04               	movwf	(??_PWM1_Duty+1)& (0+255),c
  1444  00038C  3001               	rrcf	PWM1_Duty@duty,w,c
  1445  00038E  6E03               	movwf	??_PWM1_Duty& (0+255),c
  1446  000390  0E01               	movlw	1
  1447  000392  1603               	andwf	??_PWM1_Duty,f,c
  1448  000394  3A03               	swapf	??_PWM1_Duty,f,c
  1449  000396  4603               	rlncf	??_PWM1_Duty,f,c
  1450  000398  50BD               	movf	4029,w,c	;volatile
  1451  00039A  1803               	xorwf	??_PWM1_Duty,w,c
  1452  00039C  0BDF               	andlw	-33
  1453  00039E  1803               	xorwf	??_PWM1_Duty,w,c
  1454  0003A0  6EBD               	movwf	4029,c	;volatile
  1455                           
  1456                           ;newmain.c: 40: CCP1CONbits.CCP1Y = duty & 1;
  1457  0003A2  C001  F003         	movff	PWM1_Duty@duty,??_PWM1_Duty
  1458  0003A6  0E01               	movlw	1
  1459  0003A8  1603               	andwf	??_PWM1_Duty,f,c
  1460  0003AA  3A03               	swapf	??_PWM1_Duty,f,c
  1461  0003AC  50BD               	movf	4029,w,c	;volatile
  1462  0003AE  1803               	xorwf	??_PWM1_Duty,w,c
  1463  0003B0  0BEF               	andlw	-17
  1464  0003B2  1803               	xorwf	??_PWM1_Duty,w,c
  1465  0003B4  6EBD               	movwf	4029,c	;volatile
  1466                           
  1467                           ;newmain.c: 41: CCPR1L = duty >> 2;
  1468  0003B6  C001  F003         	movff	PWM1_Duty@duty,??_PWM1_Duty
  1469  0003BA  C002  F004         	movff	PWM1_Duty@duty+1,??_PWM1_Duty+1
  1470  0003BE  90D8               	bcf	status,0,c
  1471  0003C0  3204               	rrcf	??_PWM1_Duty+1,f,c
  1472  0003C2  3203               	rrcf	??_PWM1_Duty,f,c
  1473  0003C4  90D8               	bcf	status,0,c
  1474  0003C6  3204               	rrcf	??_PWM1_Duty+1,f,c
  1475  0003C8  3203               	rrcf	??_PWM1_Duty,f,c
  1476  0003CA  5003               	movf	??_PWM1_Duty,w,c
  1477  0003CC  6EBE               	movwf	4030,c	;volatile
  1478  0003CE  0012               	return		;funcret
  1479  0003D0                     __end_of_PWM1_Duty:
  1480                           	opt stack 0
  1481                           pclatu	equ	0xFFB
  1482                           pclath	equ	0xFFA
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           prodh	equ	0xFF4
  1488                           prodl	equ	0xFF3
  1489                           intcon	equ	0xFF2
  1490                           postinc0	equ	0xFEE
  1491                           fsr0h	equ	0xFEA
  1492                           fsr0l	equ	0xFE9
  1493                           wreg	equ	0xFE8
  1494                           postdec1	equ	0xFE5
  1495                           fsr1h	equ	0xFE2
  1496                           fsr1l	equ	0xFE1
  1497                           fsr2h	equ	0xFDA
  1498                           fsr2l	equ	0xFD9
  1499                           status	equ	0xFD8
  1500                           
  1501 ;; *************** function _Myusartwrite *****************
  1502 ;; Defined at:
  1503 ;;		line 24 in file "newmain.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  b               1    wreg     unsigned char 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  b               1    0[COMRAM] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1517 ;;      Params:         0       0       0       0       0       0       0
  1518 ;;      Locals:         1       0       0       0       0       0       0
  1519 ;;      Temps:          0       0       0       0       0       0       0
  1520 ;;      Totals:         1       0       0       0       0       0       0
  1521 ;;Total ram usage:        1 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_wtf
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text9
  1531  00048E                     __ptext9:
  1532                           	opt stack 0
  1533  00048E                     _Myusartwrite:
  1534                           	opt stack 28
  1535                           
  1536                           ;incstack = 0
  1537                           ;Myusartwrite@b stored from wreg
  1538  00048E  6E01               	movwf	Myusartwrite@b,c
  1539                           
  1540                           ;newmain.c: 26: TXREG = b;
  1541  000490  C001  FFAD         	movff	Myusartwrite@b,4013	;volatile
  1542  000494  0012               	return	
  1543  000496                     __end_of_Myusartwrite:
  1544                           	opt stack 0
  1545  0000                     pclatu	equ	0xFFB
  1546                           pclath	equ	0xFFA
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           intcon	equ	0xFF2
  1554                           postinc0	equ	0xFEE
  1555                           fsr0h	equ	0xFEA
  1556                           fsr0l	equ	0xFE9
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1h	equ	0xFE2
  1560                           fsr1l	equ	0xFE1
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           pclatu	equ	0xFFB
  1565                           pclath	equ	0xFFA
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           prodh	equ	0xFF4
  1571                           prodl	equ	0xFF3
  1572                           intcon	equ	0xFF2
  1573                           postinc0	equ	0xFEE
  1574                           fsr0h	equ	0xFEA
  1575                           fsr0l	equ	0xFE9
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           fsr2h	equ	0xFDA
  1581                           fsr2l	equ	0xFD9
  1582                           status	equ	0xFD8
  1583                           
  1584                           	psect	rparam
  1585  0000                     pclatu	equ	0xFFB
  1586                           pclath	equ	0xFFA
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           fsr0h	equ	0xFEA
  1596                           fsr0l	equ	0xFE9
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           fsr1h	equ	0xFE2
  1600                           fsr1l	equ	0xFE1
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605                           	psect	temp
  1606  000033                     btemp:
  1607                           	opt stack 0
  1608  000033                     	ds	1
  1609  0000                     int$flags	set	btemp
  1610  0000                     wtemp6	set	btemp+1
  1611                           pclatu	equ	0xFFB
  1612                           pclath	equ	0xFFA
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           prodh	equ	0xFF4
  1618                           prodl	equ	0xFF3
  1619                           intcon	equ	0xFF2
  1620                           postinc0	equ	0xFEE
  1621                           fsr0h	equ	0xFEA
  1622                           fsr0l	equ	0xFE9
  1623                           wreg	equ	0xFE8
  1624                           postdec1	equ	0xFE5
  1625                           fsr1h	equ	0xFE2
  1626                           fsr1l	equ	0xFE1
  1627                           fsr2h	equ	0xFDA
  1628                           fsr2l	equ	0xFD9
  1629                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     37      50
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_PWM1_Init

Critical Paths under _wtf in COMRAM

    _wtf->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _wtf in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _wtf in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _wtf in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _wtf in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _wtf in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _wtf in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      98
                          _MyadcRead
                          _PWM1_Init
                         _PWM1_Start
 ---------------------------------------------------------------------------------
 (1) _PWM1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Init                                            4     0      4      98
                                             33 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _MyadcRead                                            3     3      0       0
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _wtf                                                 26    26      0    1385
                                              7 COMRAM    26    26      0
                       _Myusartwrite
                          _PWM1_Duty
                            ___lwdiv
                            ___lwmod
                            _checker
 ---------------------------------------------------------------------------------
 (3) _checker                                              5     3      2     207
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _PWM1_Duty                                            4     2      2     142
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Myusartwrite                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MyadcRead
   _PWM1_Init
   _PWM1_Start

 _wtf (ROOT)
   _Myusartwrite
   _PWM1_Duty
   ___lwdiv
   ___lwmod
   _checker

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     25      32       1       39.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      32      14        0.0%
DATA                 0      0      32      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jan 15 04:38:18 2018

                      _i 0031             _Myusartwrite 048E                       _au 0026  
                    l113 0488                      _PR2 000FCB             __CFG_CPD$OFF 000000  
                    _wtf 0008                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_wtf 0001                     _RCIF 007CF5  
                   i2l95 026E                     i2l96 0240                     i2l97 02BE  
                   i2l98 0244                     i2l99 0248                     _TMR1 000FCE  
                   _main 0470                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0033            __CFG_BOREN$ON 000000  
                   prodh 000FF4                     prodl 000FF3                     wtf@a 001C  
                   wtf@b 0020                     start 000E             ___param_bank 000000  
                  ??_wtf 0008                    ?_main 0001                    _T1CON 000FCD  
                  _T2CON 000FCA          __end_of___lwdiv 0386                    i2l100 024C  
                  i2l101 0250                    i2l102 0254                    i2l103 0258  
                  i2l104 025C          __end_of___lwmod 0412                    i2l105 0260  
                  i2l106 0264                    i2l122 0082                    i2l107 0268  
                  i2l131 01D2                    i2l132 01C4                    i2l124 00A0  
                  i2l133 0178                    i2l125 0160                    i2l126 0150  
                  i2l127 0142                    i2l136 01EA                    i2l128 00F6  
                  i2l137 01F2                    i2l542 0352                    i2l543 034A  
                  i2l552 03E6                    i2l553 03DE                    i2l546 0372  
                  i2l547 037C                    i2l556 03FE                    i2l557 0408  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _TXREG 000FAD  
        __end_of_checker 02C2            __CFG_PWRT$OFF 000000       __size_of_PWM1_Init 0006  
     __size_of_PWM1_Duty 004A              ?_PWM1_Start 0001                    _total 002A  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0034          __initialization 0412             __end_of_main 048E  
                 ??_main 0026            __activetblptr 000002                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _CCPR1L 000FBE                   i2l1076 00A0  
                 _TMR1IE 007CE8                   _TMR1IF 007CF0               _MyadcValue 002C  
      __end_of_PWM1_Init 049C        __end_of_PWM1_Duty 03D0      __size_of_PWM1_Start 0072  
              ??___lwdiv 0005                ??___lwmod 0005       __size_of_MyadcRead 0024  
                 _global 002E                ??_checker 0003                   clear_0 0438  
           __pdataCOMRAM 002F                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 043E  
          ___rparam_used 000001           __pcstackCOMRAM 0001        __end_of_MyadcRead 0470  
          Myusartwrite@b 0001                  _CCP1CON 000FBD                  i2u21_40 0356  
                i2u24_40 03EA             ??_PWM1_Start 0022                  i2u29_40 0090  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 0334  
                ___lwmod 03D0       __end_of_PWM1_Start 0334                  _checker 023E  
                __pcinit 0412                  __ramtop 0600                  __ptext0 0470  
                __ptext1 02C2                  __ptext2 0496                  __ptext3 044C  
                __ptext5 023E                  __ptext6 03D0                  __ptext7 0334  
                __ptext8 0386                  __ptext9 048E             __size_of_wtf 0236  
                _lolflag 002F           __pintcode_body 0012     end_of_initialization 043E  
          __Lmediumconst 0000                  int_func 0012                _RCSTAbits 000FAB  
                postdec1 000FE5                  postinc0 000FEE                _PWM1_Init 0496  
              _PWM1_Duty 0386                _TRISAbits 000F92                _TRISCbits 000F94  
              _TRISDbits 000F95              _CCP1CONbits 000FBD                _TXSTAbits 000FAC  
          ?_Myusartwrite 0001              _BAUDCONbits 000FB8            __pidataCOMRAM 049C  
             ?_PWM1_Init 0022               ?_PWM1_Duty 0001      start_initialization 0412  
            __end_of_wtf 023E         __CFG_OSC$INTIO67 000000                _MyadcRead 044C  
         ??_Myusartwrite 0001              __pbssCOMRAM 0026             checker@aChar 0005  
             ?_MyadcRead 0001         ___lwdiv@dividend 0001                __pintcode 0008  
               ?___lwdiv 0001                 ?___lwmod 0001                 ?_checker 0001  
            ??_PWM1_Init 0026              ??_PWM1_Duty 0003         ___lwdiv@quotient 0005  
               _IPR1bits 000F9F                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
          PWM1_Duty@duty 0001                 _RCONbits 000FD0               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0                copy_data0 0426  
   __end_of_Myusartwrite 0496              ??_MyadcRead 0022                 __Hrparam 0000  
       PWM1_Init@setDuty 0022                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042         __size_of_checker 0084          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 checker@a 0001            __size_of_main 001E  
               _timersec 0028                 int$flags 0033               _INTCONbits 000FF2  
               intlevel2 0000         ___lwmod@dividend 0001               _OSCCONbits 000FD3  
               wtf@a_879 001E                 wtf@b_880 0021          ___lwmod@divisor 0003  
        ___lwmod@counter 0005    __size_of_Myusartwrite 0008               _PWM1_Start 02C2  
